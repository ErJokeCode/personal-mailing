services:
  client:
    build: ./client
    command: npm run dev
    ports:
      - 5010:5010
    volumes:
      - ./client:/opt/client

  redis:
    image: redis
    restart: always
    ports:
      - 6397:6379
    volumes:
      - redisdata:/var/lib/redis/data

  bot:
    build: ./telegram-bot
    command: python main.py
    depends_on:
      redis:
        condition: service_started
    volumes:
      - ./telegram-bot:/opt/bot

  gateway:
    build: ./servers/gateway
    command: dotnet run
    ports:
      - 5000:5000
    volumes:
      - ./servers/gateway:/opt/gateway

  rabbitmq:
    image: rabbitmq
    ports:
      - 5627:5672
      - 15627:15672
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 10

  notify:
    build: 
      context: ./servers
      dockerfile: ./notify/Dockerfile
    command: dotnet run
    ports:
      - 5002:5002
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./servers/notify:/opt/notify

  coredb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: coredb
    ports:
      - 5423:5432
    volumes:
      - coredata:/var/lib/core/data

  core:
    build: 
      context: ./servers
      dockerfile: ./core/Dockerfile
    command: dotnet run
    depends_on:
      coredb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./servers/core:/opt/core

  parserdb:
    image: mongo
    restart: always
    ports:
      - 27071:27017
    volumes:
      - parserdata:/var/lib/parser/data

  parser:
    build: ./servers/parser
    command: python main.py
    depends_on:
      parserdb:
        condition: service_started
    ports:
      - 8000:8000
    volumes:
      - ./servers/parser:/opt/parser

volumes:
  redisdata:
  parserdata:
  coredata:
  rabbitmqdata:
