from fastapi import APIRouter, HTTPException, status, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Annotated, Any, Dict, Union

from app.core.elasticsearch import search_knowledge_items, index_existing_knowledge_items
from app.core.session import db_session
from app.schemas.search import SearchError, SearchHighlight, SearchHit, SearchRequest, SearchResponse

router = APIRouter(tags=["search üîç"])


@router.post("/", response_model=Union[SearchResponse, SearchError], status_code=status.HTTP_200_OK)
async def search(search_request: SearchRequest) -> Union[SearchResponse, Dict[str, Any]]:
    """
    –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É.

    –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –ø–æ–ª—è–º question –∏ answer.
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç—å—é—Ç–æ—Ä—É.
    """
    try:
        result = await search_knowledge_items(
            query=search_request.query,
            category_id=search_request.category_id,
            tutor_id=search_request.tutor_id,
            from_=search_request.from_,
            size=search_request.size,
        )
        
        if "error" in result:
            return SearchError(
                detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                error_type="elasticsearch_error",
                raw_query=result.get("raw_query")
            )

        hits = []
        for item in result.get("results", []):
            hits.append(
                SearchHit(
                    id=item["id"],
                    question=item["question"],
                    answer=item["answer"],
                    tutor_id=item["tutor_id"],
                    category_id=item["category_id"],
                    created_at=item["created_at"],
                    updated_at=item["updated_at"],
                    score=item["score"],
                    highlight=None,
                )
            )

        return SearchResponse(
            total=result.get("total", 0),
            hits=hits,
            took=0,
        )
    except Exception as e:
        error_message = str(e)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π: {error_message}",
        ) from e

@router.post("/reindex", status_code=status.HTTP_200_OK)
async def reindex_knowledge_items(
    session: Annotated[AsyncSession, Depends(db_session.session_getter)],
) -> dict:
    """
    –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–Ω–∞–Ω–∏–π –≤ Elasticsearch.
    
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –∏–ª–∏
    –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω–¥–µ–∫—Å–∞.
    """
    try:
        await index_existing_knowledge_items(session)
        return {"status": "success", "message": "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"}
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}",
        ) from e
